import json

# Inventory Management class
class InventoryManagementSystem:
    def __init__(self, filename='inventory.json'):
        self.filename = filename
        self.load_inventory()

    def load_inventory(self):
        """Load the inventory from a JSON file."""
        try:
            with open(self.filename, 'r') as file:
                self.inventory = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            # If the file does not exist or is empty, create an empty inventory
            self.inventory = {}

    def save_inventory(self):
        """Save the inventory to a JSON file."""
        with open(self.filename, 'w') as file:
            json.dump(self.inventory, file, indent=4)

    def add_product(self, product_name, quantity, price):
        """Add a new product to the inventory."""
        if product_name in self.inventory:
            print(f"Product '{product_name}' already exists. Use update to change the quantity.")
        else:
            self.inventory[product_name] = {
                'quantity': quantity,
                'price': price
            }
            print(f"Product '{product_name}' added successfully.")
        self.save_inventory()

    def update_quantity(self, product_name, quantity):
        """Update the quantity of an existing product."""
        if product_name in self.inventory:
            self.inventory[product_name]['quantity'] += quantity
            print(f"Quantity of '{product_name}' updated. New quantity: {self.inventory[product_name]['quantity']}")
            self.save_inventory()
        else:
            print(f"Product '{product_name}' does not exist.")

    def remove_product(self, product_name):
        """Remove a product from the inventory."""
        if product_name in self.inventory:
            del self.inventory[product_name]
            print(f"Product '{product_name}' removed from inventory.")
            self.save_inventory()
        else:
            print(f"Product '{product_name}' not found.")

    def view_inventory(self):
        """Display the current inventory."""
        if self.inventory:
            print("\nInventory List:")
            for product_name, details in self.inventory.items():
                print(f"Product: {product_name}")
                print(f"  Quantity: {details['quantity']}")
                print(f"  Price: ${details['price']:.2f}")
                print("----------------------------")
        else:
            print("No products in the inventory.")

    def search_product(self, product_name):
        """Search for a product in the inventory."""
        if product_name in self.inventory:
            details = self.inventory[product_name]
            print(f"Product found: {product_name}")
            print(f"  Quantity: {details['quantity']}")
            print(f"  Price: ${details['price']:.2f}")
        else:
            print(f"Product '{product_name}' not found.")

# Main menu function
def main():
    ims = InventoryManagementSystem()  # Create an instance of the system

    while True:
        print("\n--- Inventory Management System ---")
        print("1. Add Product")
        print("2. Update Product Quantity")
        print("3. Remove Product")
        print("4. View Inventory")
        print("5. Search for a Product")
        print("6. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            name = input("Enter product name: ")
            quantity = int(input("Enter quantity: "))
            price = float(input("Enter price: "))
            ims.add_product(name, quantity, price)

        elif choice == '2':
            name = input("Enter product name: ")
            quantity = int(input("Enter quantity to add (positive value) or subtract (negative value): "))
            ims.update_quantity(name, quantity)

        elif choice == '3':
            name = input("Enter product name: ")
            ims.remove_product(name)

        elif choice == '4':
            ims.view_inventory()

        elif choice == '5':
            name = input("Enter product name to search: ")
            ims.search_product(name)

        elif choice == '6':
            print("Exiting the system.")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
